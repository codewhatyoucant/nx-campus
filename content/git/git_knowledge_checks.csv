, Titel                             , Subtitel                                  , Body                                                                                     , Option 1                              , Option 2                              , Option 3                           , Antwort  , Ausführliche Antwort                                                                                                                                  , Modulzuordnung              ,
,-----------------------------------,-------------------------------------------,------------------------------------------------------------------------------------------,---------------------------------------,---------------------------------------,------------------------------------,----------,------------------------------------------------------------------------------------------------------------------------------------------------------,--------------------------------,
, Was ist Versionskontrolle?        , Grundlagen der Versionskontrolle          , Was ermöglicht ein Versionskontrollsystem?                                               , Änderungen speichern                  , Sicherung erstellen                  , Online-Kollaboration              , Option 1 , Versionskontrollsysteme ermöglichen das Speichern und Nachverfolgen von Änderungen in Dateien, meist in einem softwarebezogenen Projekt.              , Modul 1: Einführung          ,
, Geschichte von Git                , Ursprung und Entwicklung                  , In welchem Jahr wurde Git erstmalig veröffentlicht?                                      , 2001                                  , 2005                                  , 2010                               , Option 2 , Git wurde 2005 von Linus Torvalds als Tool zur besseren Verwaltung des Linux Kernel Codes entwickelt.                                                  , Modul 1: Einführung          ,
, Git vs. SVN                       , Vergleich von Versionskontrollsystemen    , Was ist ein Hauptunterschied zwischen Git und SVN?                                       , Zentralisiert                         , Dezentralisiert                      , Beide zentralisiert              , Option 2 , Im Gegensatz zu SVN (Subversion), das ein zentralisiertes Modell verwendet, ist Git ein dezentrales Versionskontrollsystem.                            , Modul 1: Einführung          ,
, Installation von Git              , Setup Prozess                             , Auf welchem Betriebssystem benötigt Git keine zusätzliche Software zur Installation?     , Windows                               , Linux                                , macOS                              , Option 3 , Auf macOS ist Git oft vorinstalliert oder kann leicht über das Terminal installiert werden, ohne zusätzliche Software zu benötigen.                    , Modul 2: Installation        ,
, Git Konfiguration                 , Erste Schritte                            , Welcher Befehl setzt den Benutzernamen in Git?                                           , git config                            , git init                             , git set                            , Option 1 , Der Befehl `git config` wird verwendet, um den Benutzernamen und die E-Mail-Adresse für Git zu konfigurieren, z.B. `git config --global user.name`.   , Modul 2: Installation        ,
, Repository Initialisierung        , Git-Befehle                               , Welcher Befehl wird verwendet, um ein neues lokales Repository zu erstellen?             , git start                             , git create                           , git init                           , Option 3 , Der Befehl `git init` initialisiert ein neues Git-Repository im aktuellen Verzeichnis.                                                                , Modul 3: Grundlagen         ,
, Änderungen verfolgen              , Git Workflow                              , Welcher Befehl fügt Änderungen zur Staging Area hinzu?                                   , git add                               , git commit                           , git push                           , Option 1 , Der Befehl `git add` fügt geänderte Dateien zur Staging Area hinzu, um sie für den nächsten Commit vorzubereiten.                                      , Modul 3: Grundlagen         ,
, Überprüfung von Änderungen        , Überprüfen des Status                     , Welcher Befehl zeigt den aktuellen Status des Repositories?                              , git status                            , git check                            , git log                            , Option 1 , Der Befehl `git status` gibt den Status des Arbeitsverzeichnisses aus und zeigt Änderungen, die gestaged oder noch nicht gestaged sind.                , Modul 3: Grundlagen         ,
, Branching in Git                  , Verwendung von Branches                   , Wie erstellt man einen neuen Branch in Git?                                              , git branch new                        , git new branch                       , git branch                         , Option 3 , Mit `git branch <branchname>` erstellt man einen neuen Branch, wobei `<branchname>` der Name des neuen Branches ist.                                   , Modul 4: Branching          ,
, Merge vs. Rebase                  , Fortgeschrittene Techniken                , Welche Methode bewahrt die lineare Projektgeschichte?                                    , Merge                                 , Rebase                               , Beide                              , Option 2 , Rebase wird verwendet, um die Projektgeschichte linear zu halten, indem die Änderungen auf eine Kopie der Zielbasis neu angewendet werden.            , Modul 4: Branching          ,
, Nutzung von Remote-Repositories   , Kollaboration in Git                      , Welcher Befehl wird verwendet, um lokale Änderungen an ein Remote-Repository zu senden?  , git send                              , git push                             , git upload                         , Option 2 , Der Befehl `git push` wird verwendet, um lokale Änderungen an ein Remote-Repository zu übertragen, typischerweise nach GitHub oder GitLab.             , Modul 5: Zusammenarbeit     ,
, Konfliktlösung                    , Zusammenarbeit in Git                     , Was ist ein häufiger Grund für Merge-Konflikte in Git?                                   , Unterschiedliche Commit-Nachrichten   , Unterschiedliche Änderungen in denselben Zeilen , Beide , Option 2 , Merge-Konflikte entstehen oft, wenn zwei Branches unterschiedliche Änderungen in den gleichen Zeilen eines Dokuments haben.                             , Modul 5: Zusammenarbeit     ,
, Stashing in Git                   , Temporäres Speichern von Änderungen       , Welcher Befehl speichert Änderungen temporär und bereinigt den Arbeitsbereich?           , git stash                             , git store                            , git save                           , Option 1 , `git stash` speichert uncommittete Änderungen temporär und stellt den Arbeitsbereich auf den letzten Commit-Zustand zurück.                            , Modul 6: Fortgeschrittene Techniken ,
, Verwendung von Tags               , Organisation von Commits                  , Welcher Befehl wird verwendet, um einen neuen Tag zu erstellen?                          , git tag                               , git make tag                         , git create tag                     , Option 1 , Der Befehl `git tag <tagname>` wird verwendet, um einen neuen Tag im Repository zu erstellen, oft zur Markierung von Release-Versionen.                , Modul 6: Fortgeschrittene Techniken ,
, Git Hooks                         , Automatisierung in Git                    , Was sind Git Hooks?                                                                     , Skripte, die bei bestimmten Ereignissen ausgeführt werden , Fehler im Code , Anmerkungen im Repository       , Option 1 , Git Hooks sind Skripte, die automatisch bei bestimmten Ereignissen wie einem Commit oder Push ausgeführt werden, um Workflows zu automatisieren.       , Modul 6: Fortgeschrittene Techniken ,
, Git Flow                          , Beliebte Workflows                        , Was beschreibt Git Flow am besten?                                                      , Ein spezifischer Branching-Workflow   , Ein Befehlszeilentool                , Eine Versionskontrollsoftware     , Option 1 , Git Flow ist ein Branching-Modell für Git, das speziell entwickelt wurde, um den Softwareentwicklungsprozess zu unterstützen und zu strukturieren.      , Modul 7: Best Practices     ,
, Sicherheit in Git                 , Schutz von Code                           , Welches ist eine empfohlene Praxis zur Sicherung von Git-Repositories?                   , Regelmäßige Backups                   , Nur Master-Branch verwenden          , Keine                              , Option 1 , Regelmäßige Backups sind essentiell, um die Daten in Git-Repositories zu sichern, vor allem, wenn es um wichtige oder sensible Informationen geht.     , Modul 7: Best Practices     ,
, Undo in Git                       , Korrektur von Fehlern                     , Welcher Befehl wird verwendet, um den letzten Commit rückgängig zu machen, ohne die Änderungen zu verlieren? , git revert  , git reset       , git undo    , Option 2 , `git reset --soft HEAD^` macht den letzten Commit rückgängig und lässt die Änderungen im Arbeitsverzeichnis unberührt, sodass sie erneut gestaged werden können. , Modul 3: Grundlagen         ,
, Git im Team                       , Effektive Teamarbeit                      , Welches ist eine beste Praxis für Teams, die Git verwenden?                              , Häufige Commits                       , Wenig Branches                       , Keine Merge-Konflikte zulassen     , Option 1 , Häufige Commits helfen dabei, Änderungen klar zu dokumentieren und Konflikte zu minimieren, da Änderungen in kleineren, handhabbaren Teilen erfolgen.   , Modul 5: Zusammenarbeit     ,
, Tagging-Strategien                , Versionierung mit Git                     , Warum ist es nützlich, Commits zu taggen?                                                , Um Versionen zu markieren             , Um Autoren zu markieren              , Um Merge-Konflikte zu vermeiden    , Option 1 , Das Taggen von Commits ist nützlich, um spezifische Versionen wie Releases oder wichtige Updates klar zu kennzeichnen, was die Organisation erleichtert. , Modul 6: Fortgeschrittene Techniken ,
, Einrichtung eines Repositories    , Anfangsschritte in Git                    , Welcher Befehl klont ein externes Repository auf Ihren lokalen Computer?                 , git pull                              , git clone                            , git copy                           , Option 2 , `git clone <repository-url>` wird verwendet, um ein komplettes Repository inklusive aller Dateien und Branches lokal zu duplizieren.                   , Modul 2: Installation        ,
, Grundlegende Git-Befehle          , Einstieg in Git                           , Welcher Befehl zeigt eine Liste aller bisherigen Commits an?                             , git commits                           , git history                          , git log                            , Option 3 , `git log` zeigt eine Liste aller bisherigen Commits im aktuellen Branch an, was hilft, die Entwicklungshistorie zu verfolgen.                          , Modul 3: Grundlagen         ,
, Git für Einzelanwender            , Unabhängige Nutzung von Git               , Wie sieht der Befehl aus, um Änderungen am aktuellen Branch zu verwerfen?                , git discard                           , git revert                           , git checkout --                    , Option 3 , `git checkout -- <file>` verwirft Änderungen an einer Datei im aktuellen Branch und stellt den letzten gespeicherten Zustand wieder her.                , Modul 3: Grundlagen         ,
, Git Ignore-Datei                  , Ignorieren von Dateien                    , Was sollte in einer `.gitignore` Datei stehen?                                           , Konfigurationsdateien                 , Temporäre Dateien                    , Beides                             , Option 3 , In einer `.gitignore` Datei sollten alle Dateitypen aufgelistet werden, die nicht verfolgt werden sollen, wie temporäre Dateien und Konfigurationsdateien. , Modul 3: Grundlagen         ,
, Rückgängig machen in Git          , Fehlerbehebung                            , Welcher Befehl entfernt einen spezifischen Commit aus der Historie, ohne die Daten zu verlieren? , git remove   , git revert -n  , git reset --soft HEAD^             , Option 3 , `git reset --soft HEAD^` setzt das Repository auf den Zustand vor dem letzten Commit zurück, behält aber die Änderungen im Arbeitsverzeichnis.          , Modul 3: Grundlagen         ,
, Commit-Nachrichten in Git         , Best Practices                            , Was sollte eine gute Commit-Nachricht beinhalten?                                        , Nur eine kurze Beschreibung           , Details zum Warum der Änderungen     , Beides                             , Option 3 , Eine gute Commit-Nachricht sollte eine kurze Beschreibung der Änderungen und eine detaillierte Erklärung des Warums enthalten.                         , Modul 7: Best Practices     ,
, Merge-Konflikte auflösen          , Fortgeschrittene Techniken                , Was ist der erste Schritt, wenn ein Merge-Konflikt in Git auftritt?                      , Führe git merge erneut aus            , Behebe die Konflikte manuell        , Nutze ein Merge-Tool               , Option 2 , Bei einem Merge-Konflikt sollte man zunächst die Konflikte manuell in den betroffenen Dateien beheben, bevor der Merge abgeschlossen wird.              , Modul 5: Zusammenarbeit     ,
, Git Reset vs. Revert              , Unterschiede verstehen                    , Welcher Befehl ist sicherer zu verwenden, wenn man Änderungen öffentlich geteilt hat?    , git reset                             , git revert                           , git checkout                       , Option 2 , `git revert` ist sicherer für öffentlich geteilte Änderungen, da es einen neuen Commit erzeugt, der den vorherigen rückgängig macht, ohne die Historie zu verändern. , Modul 6: Fortgeschrittene Techniken ,
, Effizientes Branching             , Best Practices                            , Welcher Git-Befehl erstellt und wechselt gleichzeitig zu einem neuen Branch?             , git branch -b                         , git checkout -b                      , git switch -c                      , Option 2 , `git checkout -b <new-branch>` erstellt und wechselt gleichzeitig zu einem neuen Branch, was das Branching effizienter macht.                            , Modul 4: Branching          ,
, Git Collaboration Tools           , Werkzeuge für Teams                       , Welche Plattform ist am häufigsten für die Verwaltung von Git Repositories verwendet?    , GitLab                                , GitHub                               , Bitbucket                          , Option 2 , GitHub ist eine der am häufigsten verwendeten Plattformen für die Verwaltung von Git Repositories und bietet viele Tools zur Unterstützung der Zusammenarbeit. , Modul 5: Zusammenarbeit     ,
, Remote Branches                   , Arbeiten mit entfernten Repositories      , Wie zeigt man alle entfernten Branches an, die zu einem Repository gehören?              , git branch -r                         , git remote show                     , git remote -v                      , Option 1 , `git branch -r` listet alle entfernten Branches auf, die mit dem lokalen Repository verknüpft sind.                                                     , Modul 5: Zusammenarbeit     ,
, Git Fetch vs. Pull                , Unterschiede und Anwendungen              , Was ist der Unterschied zwischen `git fetch` und `git pull`?                             , fetch lädt runter, pull fusioniert   , fetch fusioniert, pull lädt runter , Beide laden nur runter             , Option 1 , `git fetch` lädt die neuesten Änderungen herunter, ohne sie zu fusionieren, während `git pull` die Änderungen herunterlädt und automatisch fusioniert. , Modul 5: Zusammenarbeit     ,
, Git Stash Anwendung               , Zwischenspeichern von Änderungen          , Wie wendet man gespeicherte Stashes an, ohne sie aus dem Stash zu löschen?               , git stash pop                        , git stash apply                     , git stash use                      , Option 2 , `git stash apply` wendet Änderungen aus dem Stash an, ohne den Stash zu löschen, was es ermöglicht, die Änderungen später erneut zu verwenden.            , Modul 6: Fortgeschrittene Techniken ,
, Git Cherry-pick                   , Fortgeschrittene Techniken                , Was macht der Befehl `git cherry-pick`?                                                   , Wählt spezifische Commits aus und wendet sie an , Erstellt einen neuen Branch        , Löscht alte Commits                , Option 1 , `git cherry-pick` wird verwendet, um spezifische Commits aus einem anderen Branch auszuwählen und sie in den aktuellen Branch zu übertragen.             , Modul 6: Fortgeschrittene Techniken ,
, Verwaltung großer Git Repositories , Effizienz und Performance                , Wie kann man die Performance in großen Git Repositories verbessern?                      , Durch regelmäßiges Löschen alter Branches , Durch Verwendung von Shallow Clones , Beides                             , Option 2 , Shallow Clones verbessern die Performance, indem sie die Tiefe der geklonten Historie begrenzen, was weniger Daten überträgt.                           , Modul 6: Fortgeschrittene Techniken ,
, Git Blame                         , Code-Verantwortlichkeiten nachverfolgen   , Was zeigt der Befehl `git blame` an?                                                       , Den Autor jedes Commits               , Fehler in der Codebasis             , Performance-Probleme               , Option 1 , `git blame` zeigt an, welcher Entwickler welche Zeile eines Files geändert hat, was hilfreich ist, um die Verantwortlichkeiten nachzuverfolgen.         , Modul 6: Fortgeschrittene Techniken ,
, Git Rebase interaktiv             , Fortgeschrittene Commit-Bearbeitung       , Wie startet man einen interaktiven Rebase?                                                , git rebase -i HEAD                    , git rebase -i master                , git interactive master             , Option 2 , `git rebase -i master` startet einen interaktiven Rebase auf dem Master-Branch, der es erlaubt, Commits zu bearbeiten, zu entfernen oder neu zu ordnen.  , Modul 6: Fortgeschrittene Techniken ,
, Git Diff                          , Änderungen vergleichen                    , Was zeigt der Befehl `git diff` an?                                                        , Unterschiede zwischen Commits         , Zusammenführungskonflikte           , Beide                              , Option 1 , `git diff` zeigt die Unterschiede zwischen zwei Commits, Arbeitskopien oder dem Staging-Bereich an, um Änderungen sichtbar zu machen.                   , Modul 3: Grundlagen         ,
, Git Clean                         , Arbeitsverzeichnis bereinigen             , Welcher Befehl entfernt nicht nachverfolgte Dateien aus dem Arbeitsverzeichnis?           , git clean -f                          , git clean -d                        , git clear                          , Option 1 , `git clean -f` entfernt nicht nachverfolgte Dateien aus dem Arbeitsverzeichnis, was hilft, das Repository sauber zu halten.                             , Modul 6: Fortgeschrittene Techniken ,
, Git Archive                       , Repository Archivierung                   , Welcher Befehl wird verwendet, um ein Archiv von Inhalten eines Git-Repository zu erstellen? , git archive HEAD                    , git archive master                  , git backup                         , Option 1 , `git archive` wird verwendet, um ein Archiv der Inhalte eines Git-Repositories zu erstellen, oft zur Verteilung oder Archivierung.                       , Modul 6: Fortgeschrittene Techniken ,
, Git Worktree                      , Mehrere Arbeitskopien                     , Was ermöglicht der Befehl `git worktree`?                                                  , Arbeiten mit mehreren Arbeitskopien eines Repositories gleichzeitig , Erstellen von Backup-Kopien , Konfigurieren von Benutzerdaten    , Option 1 , `git worktree` ermöglicht das Arbeiten mit mehreren Arbeitskopien des gleichen Repositories, was hilfreich ist, um an mehreren Issues gleichzeitig zu arbeiten. , Modul 6: Fortgeschrittene Techniken ,
, Git Alias                         , Benutzerdefinierte Befehle                , Wie erstellt man einen Alias in Git?                                                       , git config alias                     , git alias set                       , git make alias                     , Option 1 , `git config --global alias.<alias-name> <git-command>` erstellt einen benutzerdefinierten Alias für ein Git-Kommando, um Befehle zu verkürzen.           , Modul 2: Installation        ,
, Git Submodule                     , Management von Unterprojekten             , Was ist ein Git Submodule?                                                                 , Ein Repository innerhalb eines anderen Repositorys , Ein externes Tool                , Ein Branching-Modell               , Option 1 , Ein Git Submodule ist ein Repository, das innerhalb eines anderen Git-Repositories eingebettet ist, um Abhängigkeiten oder separate Projekte zu verwalten. , Modul 6: Fortgeschrittene Techniken ,
, Git Revision Log                  , Historie ansehen                          , Welcher Befehl zeigt die Revision-Geschichte eines Repositories an?                       , git log --revision                    , git show --revision                 , git revision                       , Option 1 , `git log` zeigt die detaillierte Revision-Geschichte eines Repositories an, was bei der Nachverfolgung von Änderungen nützlich ist.                     , Modul 3: Grundlagen         ,
, Git Large File Storage            , Umgang mit großen Dateien                 , Was ist Git LFS?                                                                           , Ein Dienst für die Speicherung großer Dateien , Ein Komprimierungstool           , Ein Verschlüsselungsdienst         , Option 1 , Git Large File Storage (LFS) ist ein Dienst, der es ermöglicht, große Dateien effizient zu verwalten, indem nur Verweise auf diese Dateien im Repository gespeichert werden. , Modul 6: Fortgeschrittene Techniken ,
, Git Binary Files                  , Binärdateien verwalten                    , Warum sollte man Binärdateien in Git vermeiden?                                            , Sie erhöhen die Repository-Größe drastisch , Sie verursachen Merge-Konflikte  , Beide                              , Option 3 , Binärdateien sollten in Git vermieden werden, weil sie die Repository-Größe drastisch erhöhen und oft zu Merge-Konflikten führen können.                  , Modul 6: Fortgeschrittene Techniken ,
, Git Merge Tool                    , Konfliktlösungswerkzeuge                  , Welches Tool wird häufig zur Lösung von Merge-Konflikten in Git verwendet?                , Git Mergetool                         , Git Conflicter                      , Git Resolver                       , Option 1 , Git Mergetool ist ein Tool, das zur Lösung von Merge-Konflikten in Git verwendet wird, indem es eine grafische Oberfläche zur Konfliktlösung bietet.      , Modul 5: Zusammenarbeit     ,
, Git GUI Tools                     , Grafische Benutzeroberflächen für Git     , Welches ist ein beliebtes GUI-Tool für Git?                                                , GitKraken                             , SourceTree                          , Beide                              , Option 3 , GitKraken und SourceTree sind beliebte grafische Benutzeroberflächen für Git, die eine intuitive Verwaltung von Repositories und Branches ermöglichen.  , Modul 2: Installation        ,